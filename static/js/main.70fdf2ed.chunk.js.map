{"version":3,"sources":["firebase/firebase.utils.js","components/sign-up-form/sign-up-form.jsx","components/log-in-form/log-in-form.jsx","pages/home/home.jsx","contexts/UserContext.js","pages/user-home/user-home.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","SignUpForm","firestore","useForm","handleSubmit","errors","register","watch","reset","onSubmit","data","a","email","password","fullName","console","log","createUserWithEmailAndPassword","user","updateProfile","displayName","className","noValidate","size","style","display","type","name","placeholder","ref","required","maxLength","spellCheck","marginRight","message","pattern","value","minLength","passwordRepeat","validate","LogInForm","signInWithEmailAndPassword","Home","UserContext","createContext","UserProvider","props","useState","currentUser","setCurrentUser","useEffect","onAuthStateChanged","Provider","children","UserHome","useContext","onClick","signOut","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.70fdf2ed.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport 'firebase/firestore'\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBpC_Pkb8329gkASdlGV_Y49jUr0J8kR8U\",\r\n    authDomain: \"user-presence-app.firebaseapp.com\",\r\n    databaseURL: \"https://user-presence-app.firebaseio.com\",\r\n    projectId: \"user-presence-app\",\r\n    storageBucket: \"user-presence-app.appspot.com\",\r\n    messagingSenderId: \"770967970498\",\r\n    appId: \"1:770967970498:web:b411dc43cbaf866ae0115b\",\r\n    measurementId: \"G-XC4NSBS2CF\"\r\n};\r\n\r\nfirebase.initializeApp(config)\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n\r\n\r\nexport default firebase","import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport './sign-up-form.scss'\r\nimport {FaExclamationTriangle, FaUser, FaEnvelope, FaKey} from \"react-icons/fa\";\r\nimport {auth} from '../../firebase/firebase.utils'\r\n\r\nconst SignUpForm = () => {\r\n    const {handleSubmit, errors, register, watch, reset} = useForm();\r\n    const onSubmit = async (data) => {\r\n        const {email, password, fullName} = data\r\n        console.log(data);\r\n        try{\r\n            const {user} = await auth.createUserWithEmailAndPassword(email, password);\r\n            await user.updateProfile({\r\n                displayName: fullName\r\n            })\r\n            console.log(user)\r\n        }\r\n        catch(error){\r\n            console.log(error)\r\n        }\r\n        reset()\r\n    }\r\n    return (\r\n        <div className={\"form-container\"}>\r\n            <div className=\"form-title\">I do not have an account</div>\r\n            <div className=\"form-subtitle\">Sign up with your email and password</div>\r\n            <form className={`sign-up-form`} onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                <div className=\"form-fields\">\r\n                    <div className={\"input-wrapper\"+(errors.fullName?' required':'')}>\r\n                        <div className=\"input-img-wrapper\">\r\n                            <FaUser size='20px' style={{display: 'block'}}/>\r\n                        </div>\r\n                        <input type={'text'}\r\n                               name={'fullName'}\r\n                               placeholder={'Full name'}\r\n                               ref={register({required:'This field is required', maxLength: 120})}\r\n                               spellCheck={\"false\"}\r\n                        />\r\n                    </div>\r\n                    {errors.fullName && <div className={\"error\"}>\r\n                        <FaExclamationTriangle\r\n                            size='14px'\r\n                            style={{display: 'inline', marginRight: '6px'}}/>\r\n                        {errors.fullName.message}\r\n                    </div>}\r\n                    <div className={\"input-wrapper\"+(errors.email?' required':'')}>\r\n                        <div className=\"input-img-wrapper\">\r\n                            <FaEnvelope size='20px' style={{display: 'block'}}/>\r\n                        </div>\r\n                        <input type={'text'}\r\n                               name={'email'}\r\n                               placeholder={'Email address'}\r\n                               ref={register({\r\n                                   required:'This field is required',\r\n                                   pattern: {\r\n                                       value: /^\\S+@\\S+$/i,\r\n                                       message: 'Not a valid email address'\r\n                                   }\r\n                               })}\r\n                               spellCheck={\"false\"}/>\r\n                    </div>\r\n                    {errors.email &&\r\n                    <div className={\"error\"}>\r\n                        <FaExclamationTriangle\r\n                            size='14px'\r\n                            style={{display: 'inline', marginRight: '6px'}}\r\n                        />\r\n                        {errors.email.message}\r\n                    </div>}\r\n                    <div className={\"input-wrapper\"+(errors.password?' required':'')}>\r\n                        <div className=\"input-img-wrapper\">\r\n                            <FaKey size='20px' style={{display: 'block'}}/>\r\n                        </div>\r\n                        <input type={'password'}\r\n                               name={'password'}\r\n                               placeholder={'Password'}\r\n                               ref={register({\r\n                                   required:'This field is required',\r\n                                   minLength: {\r\n                                       value: 8,\r\n                                       message: \"Password must have at least 8 characters\"\r\n                                   }\r\n                               })}\r\n                               spellCheck={\"false\"}/>\r\n                    </div>\r\n                    {errors.password &&\r\n                    <div className={\"error\"}>\r\n                        <FaExclamationTriangle\r\n                            size='14px'\r\n                            style={{display: 'inline', marginRight: '6px'}}\r\n                        />\r\n                        {errors.password.message}\r\n                    </div>}\r\n                    <div className={\"input-wrapper\"+(errors.passwordRepeat?' required':'')}>\r\n                        <div className=\"input-img-wrapper\">\r\n                            <FaKey size='20px' style={{display: 'block'}}/>\r\n                        </div>\r\n                        <input type={'password'}\r\n                               name={'passwordRepeat'}\r\n                               placeholder={'Confirm password'}\r\n                               ref={register({\r\n                                   required:'This field is required',\r\n                                   validate: value => value === watch('password') || 'The passwords do not match'\r\n                               })}\r\n                               spellCheck={\"false\"}/>\r\n                    </div>\r\n                    {errors.passwordRepeat &&\r\n                    <div className={\"error\"}>\r\n                        <FaExclamationTriangle\r\n                            size='14px'\r\n                            style={{display: 'inline', marginRight: '6px'}}\r\n                        />\r\n                        {errors.passwordRepeat.message}\r\n                    </div>}\r\n                </div>\r\n                <button className=\"submit-btn\" type={\"submit\"}>SIGN UP</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUpForm;","import React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {FaExclamationTriangle, FaEnvelope, FaKey} from \"react-icons/fa\";\r\nimport './log-in-form.scss'\r\nimport {auth} from '../../firebase/firebase.utils'\r\n\r\n\r\nconst LogInForm = () => {\r\n    const {handleSubmit, errors, register} = useForm();\r\n    const onSubmit = async (data) => {\r\n        console.log(data)\r\n        const {email, password} = data\r\n        const {user} = await auth.signInWithEmailAndPassword(email, password)\r\n        console.log(user)\r\n    }\r\n    return (\r\n        <div className={\"form-container\"}>\r\n            <div className=\"form-title\">I already have an account</div>\r\n            <div className=\"form-subtitle\">Login with your details</div>\r\n            <form className={`log-in-form`} onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                <div className=\"form-fields\">\r\n                    <div className={\"input-wrapper\"+(errors.email?' required':'')}>\r\n                        <div className=\"input-img-wrapper\">\r\n                            <FaEnvelope size='20px' style={{display: 'block'}}/>\r\n                        </div>\r\n                        <input type={'text'}\r\n                               name={'email'}\r\n                               placeholder={'Email address'}\r\n                               ref={register({\r\n                                   required:'This field is required',\r\n                                   pattern: {\r\n                                       value: /^\\S+@\\S+$/i,\r\n                                       message: 'Not a valid email address'\r\n                                   }\r\n                               })}\r\n                               spellCheck={\"false\"}/>\r\n                    </div>\r\n                    {errors.email &&\r\n                    <div className={\"error\"}>\r\n                        <FaExclamationTriangle\r\n                            size='14px'\r\n                            style={{display: 'inline', marginRight: '6px'}}\r\n                        />\r\n                        {errors.email.message}\r\n                    </div>}\r\n                    <div className={\"input-wrapper\"+(errors.password?' required':'')}>\r\n                        <div className=\"input-img-wrapper\">\r\n                            <FaKey size='20px' style={{display: 'block'}}/>\r\n                        </div>\r\n                        <input type={'password'}\r\n                               name={'password'}\r\n                               placeholder={'Password'}\r\n                               ref={register({\r\n                                   required:'This field is required',\r\n                                   minLength: {\r\n                                       value: 8,\r\n                                       message: \"Password must have at least 8 characters\"\r\n                                   }\r\n                               })}\r\n                               spellCheck={\"false\"}/>\r\n                    </div>\r\n                    {errors.password &&\r\n                    <div className={\"error\"}>\r\n                        <FaExclamationTriangle\r\n                            size='14px'\r\n                            style={{display: 'inline', marginRight: '6px'}}\r\n                        />\r\n                        {errors.password.message}\r\n                    </div>}\r\n                </div>\r\n                <button className=\"submit-btn\" type={\"submit\"}>LOG IN</button>\r\n            </form>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default LogInForm;","import React from 'react';\r\nimport './home.scss'\r\nimport SignUpForm from \"../../components/sign-up-form/sign-up-form\";\r\nimport LogInForm from \"../../components/log-in-form/log-in-form\";\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className={\"home\"}>\r\n            <div className=\"home-title\">User Presence App</div>\r\n            <div className=\"form-flexbox\">\r\n                <SignUpForm/>\r\n                <div className=\"vertical-divider\"> </div>\r\n                <LogInForm/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React, {useState, useEffect, createContext} from 'react';\r\nimport {auth} from \"../firebase/firebase.utils\";\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = (props) => {\r\n    const [currentUser, setCurrentUser] = useState(null)\r\n    useEffect(() => auth.onAuthStateChanged(user => {\r\n        console.log(`Auth state changed`, user)\r\n        setCurrentUser(user)\r\n    }), [])\r\n\r\n    return (\r\n        <UserContext.Provider value={currentUser}>\r\n            {props.children}\r\n        </UserContext.Provider>\r\n    )\r\n};","import React, {useContext} from 'react';\r\nimport './user-home.scss'\r\nimport {UserContext} from \"../../contexts/UserContext\";\r\nimport {auth} from '../../firebase/firebase.utils'\r\nconst UserHome = () => {\r\n    const user = useContext(UserContext)\r\n    const {displayName, email} = user\r\n    return (\r\n        <div className={'user-home'}>\r\n            <button className={'primary-btn'} onClick={()=> auth.signOut()}>\r\n                SIGN OUT\r\n            </button>\r\n            <div className=\"title\">Welcome, {displayName}</div>\r\n            <div className=\"sub\">Email: {email}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserHome;","import React, {useContext} from 'react';\nimport './App.css';\nimport {Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport Home from \"./pages/home/home\";\nimport UserHome from \"./pages/user-home/user-home\";\nimport {UserContext} from \"./contexts/UserContext\";\n\nfunction App() {\n    const user = useContext(UserContext)\n    console.log(`from APP render:`, user)\n  return (\n      <Router>\n              <div className=\"App\">\n                  <Switch>\n                      <Route exact path={'/'}>\n                          {\n                              user?<UserHome/>:<Home/>\n                          }\n                      </Route>\n                  </Switch>\n              </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {UserProvider} from \"./contexts/UserContext\";\nReactDOM.render(\n  <React.StrictMode>\n      <UserProvider>\n          <App />\n      </UserProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}